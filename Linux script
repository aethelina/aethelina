
#!/bin/bash


# Install updates
sudo apt update && sudo apt upgrade -y
# Remove unnecessary packages
sudo apt autoremove -y


# Firewall
sudo apt-get install ufw -y && sudo ufw enable


# Change login chances/age
sed -i 's/PASS_MAX_DAYS.*$/PASS_MAX_DAYS 90/;s/PASS_MIN_DAYS.*$/PASS_MIN_DAYS 10/;s/PASS_WARN_AGE.*$/PASS_WARN_AGE 7/' /etc/login.defs
echo 'auth required pam_faillock.so deny=5 unlock_time=1800' >> /etc/pam.d/common-auth
sed -i 's/\(pam_unix\.so.*\)$/\1 remember=5 minlen=8/' /etc/pam.d/common-password
sed -i 's/\(pam_pwquality\.so.*\)$/\1 retry=3 minlen=8 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1/' /etc/pam.d/common-password
sudo apt-get install auditd -y && sudo auditctl -e 1
sudo apt-get remove samba* -y
sudo apt-get remove minetest -y


# Find music (probably in admin's Music folder)
find /home/ -type f \( -name "*.mp3" -o -name "*.mp4" \)


# Remove any downloaded "hacking tools" packages
find /home/ -type f \( -name "*.tar.gz" -o -name "*.tgz" -o -name "*.zip" -o -name "*.deb" \)


# Function to print with a timestamp
printTime() {
    echo "$(date +"%Y-%m-%d %H:%M:%S") - $1"
}


if [ $EUID -ne 0 ]; then
  echo "This script must be run as root"
  exit
fi
printTime "Script is being run as root."


printTime "The current OS is Linux Ubuntu."


mkdir -p ~/Desktop/backups
chmod 777 ~/Desktop/backups
printTime "Backups folder created on the Desktop."


cp /etc/group ~/Desktop/backups/
cp /etc/passwd ~/Desktop/backups/
printTime "/etc/group and /etc/passwd files backed up."


echo "Type all user account names, with a space in between"
read -p "" -a users


usersLength=${#users[@]}


for (( i=0; i<$usersLength; i++ )); do
    clear
    echo "${users[$i]}"
    echo "Delete ${users[$i]}? yes or no"
    read yn1
    if [ "$yn1" == "yes" ]; then
        userdel -r "${users[$i]}"
        printTime "${users[$i]} has been deleted."
    else    
        echo "Make ${users[$i]} administrator? yes or no"
        read yn2                                
        if [ "$yn2" == "yes" ]; then
            gpasswd -a "${users[$i]}" sudo
            gpasswd -a "${users[$i]}" adm
            gpasswd -a "${users[$i]}" lpadmin
            gpasswd -a "${users[$i]}" sambashare
            printTime "${users[$i]} has been made an administrator."
        else
            gpasswd -d "${users[$i]}" sudo
            gpasswd -d "${users[$i]}" adm
            gpasswd -d "${users[$i]}" lpadmin
            gpasswd -d "${users[$i]}" sambashare
            gpasswd -d "${users[$i]}" root
            printTime "${users[$i]} has been made a standard user."
        fi
        
        echo "Make custom password for ${users[$i]}? yes or no"
        read yn3                                
        if [ "$yn3" == "yes" ]; then
            echo "Password:"
            read pw
            echo -e "$pw\n$pw" | passwd "${users[$i]}"
            printTime "${users[$i]} has been given the password '$pw'."
        else
            echo -e "Moodle!22\nMoodle!22" | passwd "${users[$i]}"
            printTime "${users[$i]} has been given the password 'Moodle!22'."
        fi
        passwd -x30 -n3 -w7 "${users[$i]}"
        printTime "${users[$i]}'s password has been given a maximum age of 30 days, minimum of 3 days, and warning of 7 days. ${users[$i]}'s account has been locked."
    fi
done
clear


echo "Type user account names of users you want to add, with a space in between"
read -p "" -a usersNew


usersNewLength=${#usersNew[@]}


for (( i=0; i<$usersNewLength; i++ )); do
    clear
    echo "${usersNew[$i]}"
    adduser "${usersNew[$i]}"
    printTime "A user account for ${usersNew[$i]} has been created."
    clear
    echo "Make ${usersNew[$i]} administrator? yes or no"
    read ynNew                                
    if [ "$ynNew" == "yes" ]; then
        gpasswd -a "${usersNew[$i]}" sudo
        gpasswd -a "${usersNew[$i]}" adm
        gpasswd -a "${usersNew[$i]}" lpadmin
        gpasswd -a "${usersNew[$i]}" sambashare
        printTime "${usersNew[$i]} has been made an administrator."
    else
        printTime "${usersNew[$i]} has been made a standard user."
    fi
    
    passwd -x30 -n3 -w7 "${usersNew[$i]}"
    usermod -L "${usersNew[$i]}"
    printTime "${usersNew[$i]}'s password has been given a maximum age of 30 days, minimum of 3 days, and warning of 7 days. ${usersNew[$i]}'s account has been locked."
done




